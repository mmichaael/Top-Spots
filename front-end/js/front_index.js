import { mainPageFunctionsHandler } from './functions.js';
const mainPageFunctions = new mainPageFunctionsHandler();

document.addEventListener('DOMContentLoaded', () => {
  console.log("DOM –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");

  // ---------------- –ü–æ—à—É–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å ----------------
  const searchInput = document.getElementById("searchInput");
  const searchButton = document.querySelector(".search-button");
  const suggestionsList = document.getElementById("suggestionsList");

  // === –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫ ===
  const micBtn = document.createElement("span");
  micBtn.innerHTML = "üé§";
  micBtn.className = "mic-button";
  micBtn.style.cssText = `position:absolute; right:32px; font-size:25px; color:#333; cursor:pointer; z-index:10;`;
  document.querySelector(".search-section").appendChild(micBtn);

  // === –ö–Ω–æ–ø–∫–∞ "–æ—á–∏—Å—Ç–∏—Ç–∏" ===
  const clearBtn = document.createElement("span");
  clearBtn.innerHTML = "‚úñ";
  clearBtn.className = "clear-button";
  clearBtn.style.cssText = `position:absolute; right:75px; font-size:25px; color:#333; cursor:pointer; display:none; z-index:10;`;
  document.querySelector(".search-section").appendChild(clearBtn);

  let selectedCategory = null;

  // === –ö–ª—ñ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö ===
  document.querySelectorAll(".search-category").forEach(cat => {
    cat.addEventListener("click", () => {
      document.querySelectorAll(".search-category").forEach(c => c.classList.remove("active"));
      cat.classList.add("active");
      selectedCategory = cat.dataset.type;
      console.log("–û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è:", selectedCategory);

      if (searchInput.value.trim()) {
        searchInput.dispatchEvent(new Event("input"));
      }
    });
  });

  // === –ê–≤—Ç–æ–∫–æ–º–ø–ª—ñ—Ç ===
  async function fetchSuggestions(query) {
    try {
      const response = await fetch("http://localhost:3500/api/places/autocomplete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ input: query, type: selectedCategory })
      });
      if (!response.ok) throw new Error("Backend API error: " + response.status);
      const data = await response.json();
      return data.predictions || [];
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª—ñ—Ç—É:", err);
      return [];
    }
  }

  // === –î–µ—Ç–∞–ª—ñ –º—ñ—Å—Ü—è ===
  async function fetchPlaceDetails(placeId) {
    try {
      const response = await fetch("http://localhost:3500/api/places/details", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ place_id: placeId })
      });
      if (!response.ok) throw new Error("Backend API error: " + response.status);
      const data = await response.json();
      return data.result || null;
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª–µ–π –º—ñ—Å—Ü—è:", err);
      return null;
    }
  }

  // === –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è ===
  searchInput.addEventListener("input", async (e) => {
    const query = e.target.value.trim();
    clearBtn.style.display = query ? "block" : "none";

    if (!query) {
      suggestionsList.innerHTML = "";
      suggestionsList.classList.remove("show");
      return;
    }

    const suggestions = await fetchSuggestions(query);
    suggestionsList.innerHTML = "";

    if (!suggestions || suggestions.length === 0) {
      suggestionsList.innerHTML = "<li class='no-results'>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</li>";
      suggestionsList.classList.add("show");
      return;
    }

    suggestions.forEach((s) => {
      const li = document.createElement("li");
      li.textContent = s.description;

      li.addEventListener("click", async () => {
        console.log("–ö–ª—ñ–∫ –Ω–∞ –ø—ñ–¥–∫–∞–∑–∫—É:", s.description);
        const details = await fetchPlaceDetails(s.place_id);
        if (!details) return;
        const url = `/html/city_page.html?placeId=${s.place_id}`;
        console.log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞:", url);
        window.location.href = url;
      });

      suggestionsList.appendChild(li);
    });

    suggestionsList.classList.add("show");
  });

  // === –ö–Ω–æ–ø–∫–∞ "–æ—á–∏—Å—Ç–∏—Ç–∏" ===
  clearBtn.addEventListener("click", () => {
    searchInput.value = "";
    suggestionsList.innerHTML = "";
    suggestionsList.classList.remove("show");
    clearBtn.style.display = "none";
    searchInput.focus();
  });

  // === –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫ ===
  micBtn.addEventListener("click", () => {
    if (!("webkitSpeechRecognition" in window)) {
      alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≥–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫.");
      return;
    }
    const recognition = new webkitSpeechRecognition();
    recognition.lang = "uk-UA";
    recognition.start();
    recognition.onresult = (event) => {
      searchInput.value = event.results[0][0].transcript;
      searchInput.dispatchEvent(new Event("input"));
    };
    recognition.onerror = () => alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.");
  });

  // === –ö–Ω–æ–ø–∫–∞ Search ===
  searchButton.addEventListener("click", async () => {
    const query = searchInput.value.trim();
    if (!query) return alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.");
    const suggestions = await fetchSuggestions(query);
    if (!suggestions || suggestions.length === 0) return alert("–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    const url = `/html/city_page.html?placeId=${suggestions[0].place_id}`;
    console.log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞:", url);
    window.location.href = url;
  });

  // ---------------- –ö–∞—Ä—Ç–∫–∏ –º—ñ—Å—Ç ----------------
  const cities = [
    { name: "–ö–∏—ó–≤", description: "–°—Ç–æ–ª–∏—Ü—è –£–∫—Ä–∞—ó–Ω–∏", rating: 4.8, image: "../img/–∫–∏–µ–≤ –Ω–æ—á–Ω–æ–π.jpg", mapsQuery: "Kyiv, Ukraine" },
    { name: "–õ—å–≤—ñ–≤", description: "–ö—É–ª—å—Ç—É—Ä–Ω–∞ —Å—Ç–æ–ª–∏—Ü—è", rating: 4.7, image: "../img/–ª—å–≤–æ–≤ –Ω—ñ—á–Ω–∏–π.jpg", mapsQuery: "Lviv, Ukraine" },
    { name: "–û–¥–µ—Å–∞", description: "–ú–æ—Ä—Å—å–∫–∞ –ø–µ—Ä–ª–∏–Ω–∞", rating: 4.6, image: "../img/–æ–¥–µ—Å–∞.avif", mapsQuery: "Odesa, Ukraine" },
    { name: "–•–∞—Ä–∫—ñ–≤", description: "–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–µ –º—ñ—Å—Ç–æ", rating: 4.5, image: "../img/—Ö–∞—Ä—å–∫–æ–≤.jpg", mapsQuery: "Kharkiv, Ukraine" },
    { name: "–î–Ω—ñ–ø—Ä–æ", description: "–ü—Ä–æ–º–∏—Å–ª–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä", rating: 4.4, image: "../img/–¥–Ω–µ–ø—Ä.jpg", mapsQuery: "Dnipro, Ukraine" },
  ];

  const container = document.querySelector(".scroll-container");
  const indicators = document.querySelector(".scroll-indicators");

  cities.forEach((city, index) => {
    const card = document.createElement("div");
    card.classList.add("city-card");
    card.innerHTML = `
      <img src="${city.image}" alt="${city.name}" class="city-image">
      <div class="city-content">
        <h3 class="city-name">${city.name}</h3>
        <p class="city-description">${city.description}</p>
        <div class="city-rating">‚≠ê ${city.rating}</div>
        <button class="map-button" onclick="window.open('https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(city.mapsQuery)}', '_blank')">
          –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ Google Maps
        </button>
      </div>
    `;
    container.appendChild(card);

    const dot = document.createElement("div");
    dot.classList.add("dot");
    if (index === 0) dot.classList.add("active");
    indicators.appendChild(dot);
  });

  setTimeout(() => {
    document.querySelectorAll(".city-card").forEach(card => card.classList.add("show"));
  }, 100);

  // –°–∫—Ä–æ–ª –∫–Ω–æ–ø–∫–∏
  const leftButton = document.querySelector(".scroll-button.left");
  const rightButton = document.querySelector(".scroll-button.right");
  const dots = document.querySelectorAll(".scroll-indicators .dot");
  const cardWidth = 301;

  leftButton.addEventListener("click", () =>
    container.scrollBy({ left: -cardWidth, behavior: "smooth" })
  );
  rightButton.addEventListener("click", () =>
    container.scrollBy({ left: cardWidth, behavior: "smooth" })
  );

  container.addEventListener("scroll", () => {
    const activeIndex = Math.round(container.scrollLeft / cardWidth);
    dots.forEach(dot => dot.classList.remove("active"));
    if (dots[activeIndex]) dots[activeIndex].classList.add("active");
  });

  document.addEventListener('DOMContentLoaded', () => {
  console.log("DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é...");

  // ---------------- –Ü–¥–µ—ó –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π ----------------
  function createIdeaCard({ id, title, subtitle, emoji }) {
    console.log(`–°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É: ${title || id} (id: ${id})`);
    const card = document.createElement('div');
    card.className = 'idea-card';
    card.dataset.category = id;
    card.innerHTML = `
      <div class="idea-emoji">${emoji}</div>
      <div class="idea-body">
        <h4 class="idea-title">${title || id}</h4>
        <p class="idea-sub">${subtitle}</p>
      </div>
    `;

    card.addEventListener('click', () => {
      const url = `/html/toplist.html?category=${encodeURIComponent(id)}`;
      console.log(`–ö–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç–∫—É: ${title || id} | –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞: ${url}`);
      window.location.href = url;
    });

    return card;
  }

  const wrapper = document.querySelector('.scroll-container-wrapper');
  if (!wrapper) console.warn('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ .scroll-container-wrapper –¥–ª—è —ñ–¥–µ–π');

  const ideasWrap = document.createElement('section');
  ideasWrap.className = 'ideas-section';
  ideasWrap.innerHTML = `<h2 class="ideas-title">–Ü–¥–µ—ó –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π</h2><div class="ideas-grid"></div>`;
  wrapper.insertAdjacentElement('afterend', ideasWrap);

  const ideasList = [
    { id: 'popular', title: '–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞—Ä–∞–∑', subtitle: '–¢–æ–ø-10 –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –º—ñ—Å—Ü—å', emoji: '‚≠ê' },
    { id: 'romantic', title: '–†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó', subtitle: '–Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–±–∞—á–µ–Ω—å', emoji: 'üíò' },
    { id: 'active', title: '–ê–∫—Ç–∏–≤–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫', subtitle: '–¢—Ä–µ–∫–∏–Ω–≥, –±–∞–π–∫—ñ–Ω–≥, –∞–¥—Ä–µ–Ω–∞–ª—ñ–Ω', emoji: 'üèÉ‚Äç‚ôÇÔ∏è' },
    { id: 'summer', title: '–õ—ñ—Ç–Ω—ñ —Ç—É—Ä–∏', subtitle: '–ü–ª—è–∂—ñ —Ç–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –Ω–∞ —Å–æ–Ω—Ü—ñ', emoji: 'üåû' },
    { id: 'family', title: '–°—ñ–º–µ–π–Ω—ñ –Ω–∞–ø—Ä—è–º–∫–∏', subtitle: '–î–ª—è –¥—ñ—Ç–µ–π —ñ –±–∞—Ç—å–∫—ñ–≤', emoji: 'üéà' },
    { id: 'night_life', title: '–ù—ñ—á–Ω–µ –∂–∏—Ç—Ç—è', subtitle: '–ö–ª—É–±–∏, –±–∞—Ä–∏ —Ç–∞ –≤–µ—á—ñ—Ä–∫–∏', emoji: 'üéâ' },
  ];

  const grid = document.querySelector('.ideas-grid');
  if (!grid) console.error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ .ideas-grid');
  else {
    ideasList.forEach(it => grid.appendChild(createIdeaCard(it)));
    console.log('‚úÖ –í—Å—ñ –∫–∞—Ä—Ç–∫–∏ —ñ–¥–µ–π –¥–æ–¥–∞–Ω—ñ –≤ DOM');

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
      document.querySelectorAll('.idea-card').forEach((c, i) => {
        c.style.transition = `transform 450ms cubic-bezier(.2,.9,.2,1) ${i*60}ms, opacity 350ms`;
        c.classList.add('visible');
        console.log(`–ö–∞—Ä—Ç–∫–∞ "${c.querySelector('.idea-title').textContent}" –∑'—è–≤–∏–ª–∞—Å—å`);
      });
    }, 120);
  }

  // ---------------- –¢–µ–º–∏ ----------------
  const themeCards = document.querySelectorAll(".theme-card");
  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ theme-card: ${themeCards.length}`);
  themeCards.forEach(card => {
    card.addEventListener("click", () => {
      const theme = card.dataset.theme;
      const url = `/html/toplist.html?theme=${theme}`;
      console.log(`–ö–ª—ñ–∫ –Ω–∞ —Ç–µ–º—É: ${theme} | –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞: ${url}`);
      window.location.href = url;
    });

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ª–æ–≥–∏ –¥–ª—è hover —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    card.addEventListener('mouseenter', () => {
      console.log(`–ù–∞–≤–µ–¥–µ–Ω–æ –Ω–∞ —Ç–µ–º—É: ${card.dataset.theme}`);
    });
    card.addEventListener('mouseleave', () => {
      console.log(`–í–∏–π—à–ª–∏ –∑ —Ç–µ–º–∏: ${card.dataset.theme}`);
    });
  });
});




console.log("‚úÖ front_index.js –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
console.log("‚úÖ front_index.js –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚Äî —Ä–µ–∂–∏–º –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM");

// ---------------- –Ü–¥–µ—ó –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π ----------------
const ideaCards = document.querySelectorAll(".idea-card");
console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ–∫ —ñ–¥–µ–π: ${ideaCards.length}`);

ideaCards.forEach(card => {
  const id = card.dataset.category || "–Ω–µ–≤—ñ–¥–æ–º–æ";
  console.log(`‚û°Ô∏è –û–±—Ä–æ–±–ª—è—î–º–æ –∫–∞—Ä—Ç–∫—É: ${id}`);

  card.addEventListener("click", () => {
    const url = `/html/toplist.html?category=${encodeURIComponent(id)}`;
    console.log(`üñ±Ô∏è –ö–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç–∫—É —ñ–¥–µ—ó: ${id} | –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞: ${url}`);
    window.location.href = url;
  });

  card.addEventListener("mouseenter", () => {
    console.log(`üëÄ –ù–∞–≤–µ–¥–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∫—É: ${id}`);
  });
  card.addEventListener("mouseleave", () => {
    console.log(`üëã –í–∏–π—à–ª–∏ –∑ –∫–∞—Ä—Ç–∫–∏: ${id}`);
  });
});

// ---------------- –¢–µ–º–∏ ----------------
const themeCards = document.querySelectorAll(".theme-card");
console.log(`üîé –ó–Ω–∞–π–¥–µ–Ω–æ theme-card: ${themeCards.length}`);

themeCards.forEach(card => {
  const theme = card.dataset.theme || "–Ω–µ–≤—ñ–¥–æ–º–æ";
  console.log(`‚û°Ô∏è –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–º—É: ${theme}`);

  card.addEventListener("click", () => {
 const url = `/html/toplist.html?category=${encodeURIComponent(theme)}`;

    console.log(`üñ±Ô∏è –ö–ª—ñ–∫ –Ω–∞ —Ç–µ–º—É: ${theme} | –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞: ${url}`);
    window.location.href = url;
  });

  card.addEventListener("mouseenter", () => {
    console.log(`üëÄ –ù–∞–≤–µ–¥–µ–Ω–æ –Ω–∞ —Ç–µ–º—É: ${theme}`);
  });
  card.addEventListener("mouseleave", () => {
    console.log(`üëã –í–∏–π—à–ª–∏ –∑ —Ç–µ–º–∏: ${theme}`);
  });
});




});
